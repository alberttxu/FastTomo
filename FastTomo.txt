ScriptName FastTomo
Echo ========== FastTomo ==========
/*
* Author: Albert Xu <albert.t.xu@gmail.com>
* Date Created: May 22, 2020
* Last Modified: March 20, 2021
*/

scheme = 1
# 0 = bidirectional
# 1 = dose-symmetric
# 2 = unidirectional

runOnNavItem = 0    # set to 1 to run on highlighted navigator point, and when using Acquire at Items
Debug = 0            # verbose output for debugging
shot = R               # low dose beam to use for saving data
usePrevCalib = 0    # skip calibration and use most recent parameters if they exist
tolerance = 0.4     # redo a shot if the current frame is off target (0.5 = more than 50% off screen)
eucentricity_option = 3    # 1 = rough, 2 = fine, 3 = rough & fine, 4 = calls the script named Z

### bi-directional settings
startAngleBi = 0
firstSideEnd = 60
secondSideEnd = -60
stepSizeBi = 3
###

### dose-symmetric settings
startAngleDS = 0
endAngleDS = 60
stepSizeDS = 3
groupSizeDS = 3                                  # number of tilts before switching sides, 1 = original Wim Hagen scheme
trackingShot = T                    # can also be set to V
doExtraTrackingShot = 0                # 0 = off, 1 = on; track first non-zero tilts, e.g. at +/- 3; does not apply when startAngleDS is non-zero

angleSwitchToBidirectional = -1          # switch to bidirectional scheme (set to -1 to disable); does not apply when startAngleDS is non-zero
exposureTimeIncreaseFactor = 1.5     # after switching to bidirectional
###

### unidirectional settings
startAngleUni = -60
endAngleUni = 60
stepSizeUni = 3
###

multiStepTilt_StepSize = 25

###



########## no editing below ##########

IsVariableDefined phase
prevCalibExists = $repVal1

If $Debug == 0
   SuppressReports
Endif

If $angleSwitchToBidirectional >= $endAngleDS
   angleSwitchToBidirectional = -1
Endif

If $startAngleDS != 0 AND $angleSwitchToBidirectional > 0
   Echo Cannot switch dose-symmetric scheme to bidirectional if starting angle is nonzero. Exiting
   Exit
Endif

#### main script start ####

TiltTo 0
If $runOnNavItem == 1
   RealignToNavItem 0
Endif
# save reference shot for getting residual IS shift during tilt series
Copy A S

# get eucentricity
If $eucentricity_option == 4
   Call Z
Else
   Eucentricity $eucentricity_option
Endif

ResetImageShift
V
AlignTo S
Autofocus
# report the value displayed on the microscope panel, it does not need to be correct
ReportDefocus
reference_defocus = $repVal1

calib_time = 0
If $usePrevCalib == 0 OR $prevCalibExists == 0
   ResetClock
   CallFunction TS_calibrate_Z
   ReportClock calib_time
   Echo calibration time: $calib_time
Else
   Echo Skipping Z calibration, using existing parameters
Endif

ResetClock

# align to zero tilt S
V
AlignTo S

If $scheme == 0
   CallFunction TS_bidirectional $startAngleBi $firstSideEnd $secondSideEnd $stepSizeBi
ElseIf $scheme == 1
   # record and tracking buffers for both sides
   rightRecordBuf = P
   leftRecordBuf = Q
   rightTrackingBuf = R
   leftTrackingBuf = S

   If $angleSwitchToBidirectional > 0
      CallFunction TS_dose_symmetric 0 $angleSwitchToBidirectional $stepSizeDS $groupSizeDS
      ImageProperties A
      newExposureTime = $repVal4 * $exposureTimeIncreaseFactor
      SetExposure $shot $newExposureTime
      startAngleAfterSwitch = $angleSwitchToBidirectional + $stepSizeDS
      ReportTiltAngle
      If $repVal1 > 0
         CallFunction TS_unidirectional $startAngleAfterSwitch $endAngleDS $stepSizeDS
         CallFunction TiltToMultiStep -$startAngleAfterSwitch
         $trackingShot
         AlignTo $rightTrackingBuf
         CallFunction TS_unidirectional -$startAngleAfterSwitch -$endAngleDS $stepSizeDS
      Else
         CallFunction TS_unidirectional -$startAngleAfterSwitch -$endAngleDS $stepSizeDS
         CallFunction TiltToMultiStep $startAngleAfterSwitch
         $trackingShot
         AlignTo $leftTrackingBuf
         CallFunction TS_unidirectional $startAngleAfterSwitch $endAngleDS $stepSizeDS
      Endif
      RestoreCameraSet $shot
   Else
      CallFunction TS_dose_symmetric $startAngleDS $endAngleDS $stepSizeDS $groupSizeDS
   Endif
ElseIf $scheme == 2
   WalkUpTo $startAngleUni
   CallFunction TS_unidirectional $startAngleUni $endAngleUni $stepSizeUni
Endif
TiltTo 0

ReportClock ts_time
Echo TS time: $ts_time
total_time = $ts_time + $calib_time
Echo total time: $total_time

#### main script end ####




##################################################

Function TS_calibrate_Z 0 0
   Echo ------ starting calibration -------
   defocus_angles = { -40 -22 0 22 40 }
   defocus_values = { 0 0 0 0 0 }

   Loop 5 i
      TiltTo $defocus_angles[$i]
      Autofocus -1
      ReportAutoFocus
      defocus_values[$i] = $repVal1
   EndLoop

   # do sindusoid fit for defocus curve
   sin_angles = { 0 0 0 0 0 }
   cos_angles = { 0 0 0 0 0 }
   Loop 5 i
      sin_angles[$i] = SIN $defocus_angles[$i]
      cos_angles[$i] = COS $defocus_angles[$i]
   EndLoop
   LinearFitToVars sin_angles cos_angles defocus_values
   phase := ATAN2 $repVal3 $repVal2
   cos_phase = COS $phase
   b1 := $repVal2 / $cos_phase
   # to calculate the y-intercept at zero degree tilt, non-constant term at
   #   zero degrees must be subtracted along with constant term
   sin_phase = SIN $phase
   nonconstant_term_offset := $b1 * $sin_phase
   If $Debug == 1
      Echo LinearFitToVars coefficients: $repVal2 $repVal3 $repVal4
      Echo sin curve amplitude: $b1
      Echo sin curve phase: $phase
   Endif

   TiltTo 0
   Echo ------ end of calibration ------
EndFunction


###################################################
Function TS_bidirectional 4 0
   Echo ------ starting bidirectional TS ------
   startAngle = $argVal1
   endAngleFirstSide = $argVal2
   endAngleSecondSide = $argVal3
   stepSize = $argVal4

   ### first side
   WalkUpTo $startAngle
   ResetShiftIfAbove 2
   # override S with tilted starting View
   Copy A S
   ReportImageShift
   CallFunction TS_unidirectional $startAngle $endAngleFirstSide $stepSize

   ### second side
   # backlash removal
   If $endAngleSecondSide > $startAngle
      direction = 1
   ElseIf $endAngleSecondSide < $startAngle
      direction = -1
   Endif
   angleCorrectBacklash = $startAngle - 3 * $direction
   TiltTo $angleCorrectBacklash
   TiltTo $startAngle
   # get residual IS between current location and map image
   V
   AlignTo S
   ResetShiftIfAbove 2
   ReportImageShift
   CallFunction TS_unidirectional $startAngle $endAngleSecondSide $stepSize
   Echo ------ end of bidirectional TS ------
EndFunction


###################################################
Function TS_unidirectional 3 0
   Echo ------ starting unidirectional TS ------
   startAngle = $argVal1
   endAngle = $argVal2
   stepSize = $argVal3

   # define a direction variable for convenience
   If $endAngle > $startAngle
      direction = 1
   ElseIf $endAngle < $startAngle
      direction = -1
   Else
      Echo Cannot set start and end angles to same value
      Exit
   Endif

   # create array of tilt angles
   angles = { $startAngle }
   Loop 99 i
      angle = $startAngle + $direction * $stepSize * $i
      If ($endAngle > $startAngle AND $angle > $endAngle) OR ($endAngle < $startAngle AND $angle < $endAngle)
         break
      Endif
      angles = { $angles $angle }
   EndLoop

   # start tilt series
   Loop $#angles i
      angle = $angles[$i]

      # predict Z
      sin_term = SIN $angle + $phase
      predicted_Z_change = $b1 * $sin_term - $nonconstant_term_offset
      predicted_defocus = $reference_defocus - $predicted_Z_change
      If $debug == 1
         Echo predicted_Z_change: $predicted_Z_change
         Echo predicted_defocus (microscope panel): $predicted_defocus
      Endif
      # set image shift and defocus before tilting to save time
      GoToLowDoseArea $shot
      SetDefocus $predicted_defocus

      TiltTo $angle
      $shot
      Save
      If $i == 1
         Copy A P
         Continue
      Endif

      ImageProperties
      imgWidth = $repVal1
      imgHeight = $repVal2
      minImgDim = MIN $imgWidth $imgHeight
      imgBinning = $repVal3
      AlignTo P
      ReportAlignShift
      errX = $repVal1 / $imgBinning
      errY = $repVal2 / $imgBinning
      errorInPixels = $errX * $errX + $errY * $errY
      errorInPixels = SQRT $errorInPixels
      pixelErrTolerance = $tolerance * $minImgDim
      If $Debug == 1
         Echo errX, errY, errInPixels = $errX $errY $errorInPixels
         Echo pixelErrTolerance = $pixelErrTolerance
      Endif
      If $errorInPixels > $pixelErrTolerance
         Echo Error above tolerance, retaking shot
         $shot
         Save
      Endif

      If $Debug == 1
         ReportImageShift
         Echo StageXY shifts: $repVal5 $repVal6
      Endif
      Copy A P
   EndLoop
   Echo ------ end of unidirectional TS ------
EndFunction


###############################################
Function TS_dose_symmetric 4 0
   Echo ------ starting dose symmetric TS ------
   startAngle = $argVal1
   endAngle = $argVal2
   stepSize = $argVal3
   groupSize = $argVal4

   # generate list of angles
   angles = { $startAngle }
   Loop 99 i
      i_minus_one = $i - 1
      d_theta = $stepSize + $i_minus_one * $stepSize * $groupSize
      angleR = $startAngle + $d_theta
      angleL = $startAngle - $d_theta
      If $angleR > $endAngle OR $angleL < -1 * $endAngle
         break
      Endif
      rightSide = { $angleR }
      leftSide = { $angleL }
      gsMinusOne = $groupSize - 1
      Loop $gsMinusOne j
         nextAngleR = $angleR + $j * $stepSize
         nextAngleL = $angleL - $j * $stepSize
         If $nextAngleR > $endAngle OR $nextAngleL < -1 * $endAngle
            break
         Endif
         rightSide = { $rightSide $nextAngleR }
         leftSide = { $leftSide $nextAngleL }
      EndLoop
      i_is_odd = MODULO $i 2
      If $i_is_odd == 1
         angles = { $angles $rightSide }
         angles = { $angles $leftSide }
      Else
         angles = { $angles $leftSide }
         angles = { $angles $rightSide }
      Endif
   EndLoop
   If $Debug == 1
      Echo Dose symmetric angles: $angles
   Endif
   # calculate angle of the final tracking shot, which is unnecessary and so will not be done
   Loop $#angles i
      a = $angles[$#angles-$i+1] - $startAngle
      b = $angles[$#angles-$i] - $startAngle
      If $a * $b < 0
         angleLastTrackingShot = $angles[$#angles-$i]
         If $Debug == 1
            Echo angleLastTrackingShot = $angleLastTrackingShot
         Endif
         break
      Endif
   EndLoop

   firstRightGroupDone = 0
   firstLeftGroupDone = 0

   Loop $#angles i
      angle = $angles[$i]
      If $Debug == 1
         Echo angle: $angle
      Endif

     CallFunction TiltToMultiStep $angle

      # if coming from opposite side, align to tracking shot
      If $i > 1
         If $angles[$i] > $startAngle AND $angles[$i-1] < $startAngle AND $firstRightGroupDone == 1
            If $Debug == 1
               Echo Aligning to positive side tracking shot
            Endif
            $trackingShot
            AlignTo $rightTrackingBuf
         ElseIf $angles[$i] < $startAngle AND $angles[$i-1] > $startAngle AND $firstLeftGroupDone == 1
            If $Debug == 1
               Echo Aligning to negative side tracking shot
            Endif
            $trackingShot
            AlignTo $leftTrackingBuf
         Endif
         If $doExtraTrackingShot == 1 AND ($i == 2 OR $i == 2 + $groupSize) AND $startAngle == 0
            $trackingShot
            If $angles[$i] < $startAngle
               AlignTo $leftTrackingBuf
            ElseIf $angles[$i] > $startAngle
               AlignTo $rightTrackingBuf
            Endif
         Endif
      Endif

      # predict Z
      sin_term = SIN $angle + $phase
      predicted_Z_change = $b1 * $sin_term - $nonconstant_term_offset
      predicted_defocus = $reference_defocus - $predicted_Z_change
      If $debug == 1
         Echo predicted_Z_change: $predicted_Z_change
         Echo predicted_defocus (microscope panel): $predicted_defocus
      Endif

      GoToLowDoseArea $shot
      SetDefocus $predicted_defocus
      $shot
      Save
      If $i == 1
         Copy A $rightRecordBuf
         Copy A $leftRecordBuf
         If $doExtraTrackingShot == 1 AND $startAngle == 0
            $trackingShot
            Copy A $rightTrackingBuf
            Copy A $leftTrackingBuf
         Endif
         Continue
      Endif

      ImageProperties
      imgWidth = $repVal1
      imgHeight = $repVal2
      minImgDim = MIN $imgWidth $imgHeight
      imgBinning = $repVal3
      If $angle > $startAngle
         AlignTo $rightRecordBuf
         Copy A $rightRecordBuf
      Else
         AlignTo $leftRecordBuf
         Copy A $leftRecordBuf
      Endif
      ReportAlignShift
      errX = $repVal1 / $imgBinning
      errY = $repVal2 / $imgBinning
      errorInPixels = $errX * $errX + $errY * $errY
      errorInPixels = SQRT $errorInPixels
      pixelErrTolerance = $tolerance * $minImgDim
      If $Debug == 1
         Echo errX, errY, errInPixels = $errX $errY $errorInPixels
         Echo pixelErrTolerance = $pixelErrTolerance
      Endif
      If $errorInPixels > $pixelErrTolerance
         Echo Error above tolerance, retaking shot
         $shot
         Save
      Endif

      If $Debug == 1
         ReportImageShift
         Echo StageXY shifts: $repVal5 $repVal6
      Endif

      If $i > 1 AND $i < $#angles AND $angles[$i] != $angleLastTrackingShot
         If $angles[$i] > $startAngle AND $angles[$i+1] < $startAngle
            If $Debug == 1
               Echo Next tilt will switch to left side, saving a tracking shot
            Endif
            $trackingShot
            Copy A $rightTrackingBuf
            firstRightGroupDone = 1
         ElseIf $angles[$i] < $startAngle AND $angles[$i+1] > $startAngle
            If $Debug == 1
               Echo Next tilt will switch to right side, saving a tracking shot
            Endif
            $trackingShot
            Copy A $leftTrackingBuf
            firstLeftGroupDone = 1
         Endif
      Endif
   EndLoop
   Echo ------ end of dose symmetric TS ------
EndFunction

##############################################

Function TiltToMultiStep 1 0
   toAngle = $argVal1
   ReportTiltAngle
   fromAngle = $repVal1

   If $toAngle > $fromAngle
      direction = 1
   Else
      direction = -1
   Endif

   change = ABS $toAngle - $fromAngle
   Loop 99
      If $change > $multiStepTilt_StepSize
         TiltBy $direction * $multiStepTilt_StepSize
         change = $change - $multiStepTilt_StepSize
      Else
         TiltTo $toAngle
         break
      Endif
   EndLoop
EndFunction

